<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 导入属性配置 jdbc.properties -->
    <properties resource="db.properties"/>

    <!--
        context:至少需要有一个<context>元素,用于指定一组对象的环境。
        必选属性：id：用来确定一个<context>元素
        可选属性：
        1、defaultModelType：**这个属性很重要**，这个属性定义了MBG如何生成**实体类**。
            conditional 默认属性，这个模型和下面的hierarchical类似，除了如果那个单独的类只包含一个字段，
                        将不会生成一个单独的类。因此,如果一个表的主键只有一个字段,那么不会为该字段生成单独的实体类,
                        将该字段合并到基本实体类中。
            flat：该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。**这种模型最简单，推荐使用。
            hierarchical：如果表有主键,那么该模型会产生一个单独的主键实体类,如果表还有BLOB字段，
                        则会为表生成一个包含所有BLOB字段的单独的实体类,
                        然后为所有其他的字段生成一个单独的实体类。 MBG会在所有生成的实体类之间维护一个继承关系。
        2、targetRuntime：:此属性用于指定生成的代码的运行时环境。一般使用默认值即可。
                MyBatis3:*这是默认值*：生成带条件的CRUD（奢华尊享版）
                MyBatis3Simple：生成基本的CRUD（清新简洁版）
                Ibatis2Java2
                Ibatis2Java5
    -->
    <context id="msqlTables" targetRuntime="MyBatis3">
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <!-- 生成实体类的同时还会生成实体类Example，这里的插件用于重命名 -->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$"/>
            <property name="replaceString" value="Criteria"/>
        </plugin>

        <!--旨在创建class时，对注释进行控制-->
        <commentGenerator>
            <!--suppressAllComments  false时打开注释，true时关闭注释-->
            <property name="suppressAllComments" value="true"/>
            <!--suppressDate  false时打开时间标志，true时关闭-->
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <jdbcConnection connectionURL="${jdbc.url}"
                        driverClass="${jdbc.driver}" userId="${jdbc.username}" password="${jdbc.password}">
            <!--设置可以获取tables remarks信息-->
            <property name="useInformationSchema" value="false"/>
            <!--设置可以获取remarks信息-->
            <property name="remarks" value="false"/>
        </jdbcConnection>

        <!-- java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应 DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long；
                scale=0;length[5,9]：使用Integer；
                scale=0;length<5：使用Short；
            -->
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!--
            javaBean的生成策略、查询Example类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录。推荐使用绝对路径
        -->
        <javaModelGenerator targetPackage="com.yzm4.entity"
                            targetProject="D:\idea\work\yzm_mybatis\mybatis_04\src\main\java">
            <!--是否允许子包，即targetPackage.schemaName.tableName-->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
            <!-- 设置一个根对象，即基类-->
            <!--            <property name="rootClass" value="com.yzm.entity.BaseEntity"/>-->
        </javaModelGenerator>

        <!-- SQL映射文件的生成策略  -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="D:\idea\work\yzm_mybatis\mybatis_04\src\main\resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- Mapper接口的生成策略
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.yzm4.mapper"
                             targetProject="D:\idea\work\yzm_mybatis\mybatis_04\src\main\java">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 指定数据库表
            tableName:数据库表名
            domainObjectName:实体类名
            enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            enableUpdateByExample：（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            enableDeleteByExample：enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            enableSelectByExample：enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            selectByExampleQueryId： enableInsert（默认true）：指定是否生成insert语句；
            enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            modelType：参考context元素的defaultModelType，相当于覆盖；
        -->
        <table tableName="user" domainObjectName="User"
               enableCountByExample="true" enableUpdateByExample="true" enableDeleteByExample="true"
               enableSelectByExample="true" selectByExampleQueryId="true"/>
        <table tableName="account" domainObjectName="Account"/>
        <table tableName="movie" domainObjectName="Movie"/>
    </context>
</generatorConfiguration>
